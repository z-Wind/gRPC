// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloWorld.proto

package helloworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Int struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int) Reset()         { *m = Int{} }
func (m *Int) String() string { return proto.CompactTextString(m) }
func (*Int) ProtoMessage()    {}
func (*Int) Descriptor() ([]byte, []int) {
	return fileDescriptor_06405d6227701fc8, []int{0}
}

func (m *Int) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int.Unmarshal(m, b)
}
func (m *Int) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int.Marshal(b, m, deterministic)
}
func (m *Int) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int.Merge(m, src)
}
func (m *Int) XXX_Size() int {
	return xxx_messageInfo_Int.Size(m)
}
func (m *Int) XXX_DiscardUnknown() {
	xxx_messageInfo_Int.DiscardUnknown(m)
}

var xxx_messageInfo_Int proto.InternalMessageInfo

func (m *Int) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Int)(nil), "helloworld.Int")
}

func init() { proto.RegisterFile("helloWorld.proto", fileDescriptor_06405d6227701fc8) }

var fileDescriptor_06405d6227701fc8 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x0f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x8b,
	0x94, 0x83, 0x44, 0x94, 0xa4, 0xb9, 0x98, 0x3d, 0xf3, 0x4a, 0x84, 0x44, 0xb8, 0x58, 0xcb, 0x12,
	0x73, 0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c, 0xa3, 0x33, 0x8c, 0x5c,
	0x5c, 0x1e, 0x70, 0xdd, 0x42, 0x3a, 0x5c, 0x6c, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x42, 0xfc,
	0x7a, 0x08, 0x23, 0xf4, 0x3c, 0xf3, 0x4a, 0xa4, 0xd0, 0x05, 0x94, 0x18, 0x84, 0x74, 0xb9, 0x58,
	0x83, 0x12, 0xf3, 0xd2, 0x89, 0x52, 0x6c, 0xc0, 0x28, 0xa4, 0xcd, 0xc5, 0x1c, 0x5c, 0x9a, 0x4b,
	0x8c, 0x62, 0x0d, 0x46, 0x21, 0x13, 0x2e, 0x2e, 0x88, 0x4b, 0x3c, 0x4b, 0x52, 0x8b, 0x88, 0xd3,
	0x63, 0xc0, 0x98, 0xc4, 0x06, 0xf6, 0xbe, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x04, 0xdb,
	0xf3, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloWorldClient interface {
	// A simple RPC.
	Double(ctx context.Context, in *Int, opts ...grpc.CallOption) (*Int, error)
	// A server-to-client streaming RPC.
	Range(ctx context.Context, in *Int, opts ...grpc.CallOption) (HelloWorld_RangeClient, error)
	// A client-to-server streaming RPC.
	Sum(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SumClient, error)
	// A Bidirectional streaming RPC.
	DoubleIter(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_DoubleIterClient, error)
}

type helloWorldClient struct {
	cc *grpc.ClientConn
}

func NewHelloWorldClient(cc *grpc.ClientConn) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Double(ctx context.Context, in *Int, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/helloworld.HelloWorld/Double", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) Range(ctx context.Context, in *Int, opts ...grpc.CallOption) (HelloWorld_RangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloWorld_serviceDesc.Streams[0], "/helloworld.HelloWorld/Range", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorld_RangeClient interface {
	Recv() (*Int, error)
	grpc.ClientStream
}

type helloWorldRangeClient struct {
	grpc.ClientStream
}

func (x *helloWorldRangeClient) Recv() (*Int, error) {
	m := new(Int)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) Sum(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloWorld_serviceDesc.Streams[1], "/helloworld.HelloWorld/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSumClient{stream}
	return x, nil
}

type HelloWorld_SumClient interface {
	Send(*Int) error
	CloseAndRecv() (*Int, error)
	grpc.ClientStream
}

type helloWorldSumClient struct {
	grpc.ClientStream
}

func (x *helloWorldSumClient) Send(m *Int) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldSumClient) CloseAndRecv() (*Int, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Int)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) DoubleIter(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_DoubleIterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloWorld_serviceDesc.Streams[2], "/helloworld.HelloWorld/DoubleIter", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldDoubleIterClient{stream}
	return x, nil
}

type HelloWorld_DoubleIterClient interface {
	Send(*Int) error
	Recv() (*Int, error)
	grpc.ClientStream
}

type helloWorldDoubleIterClient struct {
	grpc.ClientStream
}

func (x *helloWorldDoubleIterClient) Send(m *Int) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldDoubleIterClient) Recv() (*Int, error) {
	m := new(Int)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServer is the server API for HelloWorld service.
type HelloWorldServer interface {
	// A simple RPC.
	Double(context.Context, *Int) (*Int, error)
	// A server-to-client streaming RPC.
	Range(*Int, HelloWorld_RangeServer) error
	// A client-to-server streaming RPC.
	Sum(HelloWorld_SumServer) error
	// A Bidirectional streaming RPC.
	DoubleIter(HelloWorld_DoubleIterServer) error
}

// UnimplementedHelloWorldServer can be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServer struct {
}

func (*UnimplementedHelloWorldServer) Double(ctx context.Context, req *Int) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Double not implemented")
}
func (*UnimplementedHelloWorldServer) Range(req *Int, srv HelloWorld_RangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (*UnimplementedHelloWorldServer) Sum(srv HelloWorld_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedHelloWorldServer) DoubleIter(srv HelloWorld_DoubleIterServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleIter not implemented")
}

func RegisterHelloWorldServer(s *grpc.Server, srv HelloWorldServer) {
	s.RegisterService(&_HelloWorld_serviceDesc, srv)
}

func _HelloWorld_Double_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).Double(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloWorld/Double",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).Double(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_Range_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Int)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).Range(m, &helloWorldRangeServer{stream})
}

type HelloWorld_RangeServer interface {
	Send(*Int) error
	grpc.ServerStream
}

type helloWorldRangeServer struct {
	grpc.ServerStream
}

func (x *helloWorldRangeServer) Send(m *Int) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorld_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).Sum(&helloWorldSumServer{stream})
}

type HelloWorld_SumServer interface {
	SendAndClose(*Int) error
	Recv() (*Int, error)
	grpc.ServerStream
}

type helloWorldSumServer struct {
	grpc.ServerStream
}

func (x *helloWorldSumServer) SendAndClose(m *Int) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldSumServer) Recv() (*Int, error) {
	m := new(Int)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_DoubleIter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).DoubleIter(&helloWorldDoubleIterServer{stream})
}

type HelloWorld_DoubleIterServer interface {
	Send(*Int) error
	Recv() (*Int, error)
	grpc.ServerStream
}

type helloWorldDoubleIterServer struct {
	grpc.ServerStream
}

func (x *helloWorldDoubleIterServer) Send(m *Int) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldDoubleIterServer) Recv() (*Int, error) {
	m := new(Int)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloWorld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Double",
			Handler:    _HelloWorld_Double_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Range",
			Handler:       _HelloWorld_Range_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _HelloWorld_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoubleIter",
			Handler:       _HelloWorld_DoubleIter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloWorld.proto",
}
